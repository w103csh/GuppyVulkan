
#version 450
#extension GL_ARB_separate_shader_objects : enable

#define DSMI_UNI_DEF 0

// DECLARATIONS
void setProjectorTexCoord(const in vec4 pos);

// BINDINGS
layout(set=DSMI_UNI_DEF, binding=0) uniform CameraDefaultPerspective {
    mat4 view;
    mat4 projection;
    mat4 viewProjection;
    vec3 worldPosition;
} camera;

// // PUSH CONSTANTS
// layout(push_constant) uniform PushBlock {
//     mat4 model;
// } pushConstantsBlock;

// IN
layout(location=0) in vec3 inPosition;
layout(location=1) in vec3 inNormal;
layout(location=2) in vec4 inColor;
layout(location=3) in mat4 inModel;
// OUT
layout(location=0) out vec3 fragPosition;
layout(location=1) out vec3 fragNormal;
layout(location=2) out vec4 fragColor;
// layout(location=3) out int fragVertexIndex;

void main() {
    // This obviously can be much more efficient. (Can it??)
    mat4 viewModel = camera.view * inModel;
    vec3 cameraSpacePosition = (viewModel * vec4(inPosition, 1.0)).xyz;
    vec3 cameraSpaceNormal = normalize(mat3(viewModel) * inNormal);

    fragPosition = cameraSpacePosition;
    fragNormal = cameraSpaceNormal;
    fragColor = inColor;
    
    vec4 pos = inModel * vec4(inPosition, 1.0);
    setProjectorTexCoord(pos);

    gl_Position = camera.viewProjection * pos;
    // fragVertexIndex = gl_VertexIndex;
}


{{1.1485,-0.1287,-0.6173,-0.6172},{0.0771,1.9208,0.1543,0.1543},{-1.5514,-0.1609,-0.7716,-0.7715},{5.8460,10.6662,5.6646,5.8635}}*{0,0,0,1}