    // TODO: All materials & meshes should be made here. End of story.
    template <class TMeshType, class TMeshBaseType, typename TMeshCreateInfo, typename TMaterialCreateInfo,
              typename TInstanceCreateInfo, typename... TArgs>
    auto &make(std::vector<TMeshBaseType> &meshes, TMeshCreateInfo *pCreateInfo, TMaterialCreateInfo *pMaterialCreateInfo,
               TInstanceCreateInfo *pInstanceCreateInfo, TArgs... args) {
        // MATERIAL
        auto &pMaterial = materialHandler().makeMaterial(pMaterialCreateInfo);
        // INSTANCE
        if (pInstanceCreateInfo == nullptr)
            instDefMgr_.insert(shell().context().dev);
        else
            instDefMgr_.insert(shell().context().dev, pInstanceCreateInfo->data);

        // INSTANTIATE
        meshes.emplace_back(new TMeshType(std::ref(*this), pCreateInfo, instDefMgr_.pItems.back(), pMaterial, args...));

        // SET VALUES
        meshes.back()->offset_ = meshes.size() - 1;

        switch (meshes.back()->getStatus()) {
            case STATUS::PENDING_VERTICES:
                // Do nothing. So far this should only be a model mesh.
                // TODO: add more validation?
                break;
            case STATUS::PENDING_BUFFERS:
                meshes.back()->prepare();
                break;
            default:
                throw std::runtime_error("Invalid mesh status after instantiation");
        }

        return meshes.back();
    }