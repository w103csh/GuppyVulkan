
 - Meshes that are created that do no have an active pass/pipeline still look for descriptor
    data. This causes the program to crash because meshes always look for the data after the
    vertex buffers are loaded. The solution should be to have a queue of meshes that
    are loaded but will not be apart of the the render loop or have descriptor sets allocated.

 - Add DESTROYED status to everything that has a status and is destroyed. Then move the sampler
    creation code out of the render pass, so that I don't get confused again for an hour. This
    should also let the descriptor set update code get closer to the same place as the texture
    update notification.

 - Move the scene creation code into the a scene instead of the handler init.

 - Move all screen space passes to compute shaders. Or even better, make a computer version,
    and compare the speeds.

 - 2d Vertex implementation for input attachments. Or just different attribute descriptions.
    Probably the later.

 - Now that you can override the default descriptor offsets for sets/pipelines/passes there
    is a lot more testing to do. I know that there is a lot of redundant things created like
    descriptor layouts/sets, shader modules, pipelines layouts/pipelines (including the helper
    data structures). The easiest next step is to create dump routines so that you can just
    look at everything that is created and see what is wrong. Also, I never culled the shader
    module creation at all, so it is the worst as far as redundancy.

 - Cull the shaderInfoMap to get rid of redundant shader creation.

 - Mac now renders a black scene, but still runs the UI fine. Ugh.......

- Figure out the long standing smoothing issue... (comment about this in Face.h - indexVertices)
    - In "glaring exampler of problem with smoothing.png" I used the fragNormal variable
        as Kd.

 - Make material creation similar to instance data creation, because it is shared data/pointer.

 - Add a .ini file that can store some state (like camera position) that can be
    loaded on start, so that things are easier to debug.

 - Split the sampler creation info and validation into image|view data (i.e.
    arrayLayers v. layerCount). You can see this very clearly in the table here:
    https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkImageViewCreateInfo.html

 - Investigate the issue you saw in release mode where models loaded asynchronously had the
    wrong textures!!!! When you investigate this also make it possible to load instance data
    asynchronously in a callback so that creating a bunch of instances isn't so slow.

 - Make buffer manager data an array instead of a void pointer with the alignment
    padding added (The host memory only needs the alignment padding).

 - Kind of related to above. There is now the concept of "per framebuffer" uniform/storage
    buffers. There is a class for this where there is a single DATA member that represents
    a single source of truth. If you queury the buffer item for info about its state it returns
    the values from the single source of truth. Each frame the source of truth is copied to an
    offset into a device buffer that is pointed to by seperate descriptor sets. This way things
    that update every frame (e.g. camera, lights) don't have there state overwritten by 
    concurrent draws... All that said, the pData_ vector in the Buffer::DataItem is extra
    pointless because there is a seperate "single source of truth." This, like most other things
    in the Buffer::Manager code needs some serious thought.

 - Figure out the issue with alpha blending for transparent fragments. There is
    a comment about this in link.texture.frag, and in the default render pass
    initializer list.

 - Add a normal matrix.

 - Use immutable samplers.

 - Parallax mapping never worked right. To me, it looked like it could have been
    because of a couple things:
        -! Multisampling was distorting the tex coord offsetting.
        - Should "v" be negated? Is the step moving in the right direction?
        - ...

 - I looked into below and have come to the conclusion that it is a false positive. I
    am keeping it here so that don't forget that I looked into it.
        Fix what seems like a memory barrier problem with mipmap generation. The symptoms
        for this problem are all the errors/warnings in RenderDOC when you load just load
        the "Orange" model.

 - The depth buffer doesn't work without a ground plane under certain circumstances!!! WTF

 - "doubleSided" param doesn't work anymore for box/plane.

 - There is now a way to create multiple shader programs with different define macros
    for descriptor set slots. This revealed that there needs to be work done to determine
    compatability between shaders for pipelines that don't use the entire descriptor set
    for one stage. For example, "color.vert" and "pbr.vert" have different uniforms for
    slot 0.1, and 0.2 but not 0.0 (default camera). There are at least two pipelines that
    do not care about this for the vertex stage, so they should be able to use the same
    module for that stage, but as of now the handler just makes two modules. You can see
    this pretty clearly by looking throug the "shaderInfoMap" in the shader handler. This
    will not be easy to fix!

 - The variant code in the uniform handler is a nightmare. Either use the variant properly
    or remove it.

 - There are comments in OffsetsManager.cpp in the default map declaration about a good
    descriptor (set) offsets merging scenario. You could potentially not have to create
    duplicate descriptor set layouts if you can resolve some things. This is very hard to
    figure out and should only be tackled if it becomes an issue. The code there is
    already a nightmare.

 - HDR never worked right. I think its doable now that compute shaders are in and I
    understand barriers/semaphores better. This is not a priority though. There is a comment
    about it in hdr.comp.glsl.

 - Do light position/direction transforms in the shaders instead of onFrame. Or don't.

 - Countless more...
