
 - Move the scene creation code into the a scene instead of the handler init.

 - Now that you can override the default descriptor offsets for sets/pipelines/passes there
    is a lot more testing to do. I know that there is a lot of redundant things created like
    descriptor layouts/sets, shader modules, pipelines layouts/pipelines (including the helper
    data structures). The easiest next step is to create dump routines so that you can just
    look at everything that is created and see what is wrong. Also, I never culled the shader
    module creation at all, so it is the worst as far as redundancy.

 - Cull the shaderInfoMap to get rid of redundant shader creation.

 - SHOULD THERE BE VIEWS FOR EACH FRAMEBUFFER THAT IS CREATED OR IS IT OKAY TO SHARE THEM?
    THE SWAPCHAIN HAS A VIEW PER FRAMEBUFFER!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    WHICH IS RIGHT ????????

 - Define descriptor offsets somewhere other than the Descriptor::Set! (Maybe on a pass basis? This 
    will require a refactor of the pipeline layout creation process.)

 - Mac now renders a black scene, but still runs the UI fine. Ugh.......

- Figure out the long standing smoothing issue... (comment about this in Face.h - indexVertices)
    - In "glaring exampler of problem with smoothing.png" I used the fragNormal variable
        as Kd.

 - Make material creation public similar to instance data creation, because
    it is shared data/pointer.

 - Make all the const variables in Constant.h/elsewhere extern, so that
    you can change the values without having to recompile everything.

 - Add a .ini file that can store some state (like camera position) that can be
    loaded on start, so that things are easier to debug.

 - Split the sampler creation info and validation into image|view data (i.e.
    arrayLayers v. layerCount). You can see this very clearly in the table here:
    https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkImageViewCreateInfo.html

 - Investigate the issue you saw in release mode where models loaded
    asynchronously had the wrong textures!!!! When you investigate this
	also make it possible to load instance data asynchronously in a callback
	so that creating a bunch of instances isn't so slow.

 - Make buffer manager data an array instead of a void pointer with the alignment
    padding added (The host memory only needs the alignment padding).

 - Figure out the issue with alpha blending for transparent fragments. There is
    a comment about this in link.texture.frag, and in the default render pass
    initializer list.

 - Add a normal matrix.

 - Use immutable samplers.

 - Parallax mapping never worked right. To me, it looked like it could have been
    because of a couple things:
        -! Multisampling was distorting the tex coord offsetting.
        - Should "v" be negated? Is the step moving in the right direction?
        - ...

 - I looked into below and have come to the conclusion that it is a false positive. I
    am keeping it here so that don't forget that I looked into it.
        Fix what seems like a memory barrier problem with mipmap generation. The symptoms
        for this problem are all the errors/warnings in RenderDOC when you load just load
        the "Orange" model.

 - The depth buffer doesn't work without a ground plane under certain circumstances!!! WTF

 - "doubleSided" param doesn't work anymore for box/plane.

 - There is now a way to create multiple shader programs with different define macros
    for descriptor set slots. This revealed that there needs to be work done to determine
    compatability between shaders for pipelines that don't use the entire descriptor set
    for one stage. For example, "color.vert" and "pbr.vert" have different uniforms for
    slot 0.1, and 0.2 but not 0.0 (default camera). There are at least two pipelines that
    do not care about this for the vertex stage, so they should be able to use the same
    module for that stage, but as of now the handler just makes two modules. You can see
    this pretty clearly by looking throug the "shaderInfoMap" in the shader handler. This
    will not be easy to fix!

 - The variant code in the uniform handler is a nightmare. Either use the variant properly
    or remove it.

 - There are comments in OffsetsManager.cpp in the default map declaration about a good
    descriptor (set) offsets merging scenario. You could potentially not have to create
    duplicate descriptor set layouts if you can resolve some things. This is very hard to
    figure out and should only be tackled if it becomes an issue. The code there is
    already a nightmare.

 - Countless more...